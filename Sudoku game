import random


def MakeSudoku():
    Grid = [[0 for x in range(9)] for y in range(9)]

    for i in range(9):
        for j in range(9):
            Grid[i][j] = 0

    for i in range(20):
        row = random.randrange(9)
        col = random.randrange(9)
        num = random.randrange(1, 10)
        while not CheckValid(Grid, row, col, num) or Grid[row][col] != 0:
            row = random.randrange(9)
            col = random.randrange(9)
            num = random.randrange(1, 10)
        Grid[row][col] = num;

    return Grid


def Printgrid(Grid):
    TableTB = "|--------------------------------|"
    TableMD = "|----------+----------+----------|"
    print(TableTB)
    for x in range(9):
        for y in range(9):
            if (x == 3 or x == 6) and y == 0:
                print(TableMD)
            if y == 0 or y == 3 or y == 6:
                print("|", end=" ")
            print(" " + str(Grid[x][y]), end=" ")
            if y == 8:
                print("|")
    print(TableTB)


def CheckValid(Grid, row, col, num):
    Check_Valid = True
    for x in range(9):
        if Grid[x][col] == num:
            Check_Valid = False
    for y in range(9):
        if (Grid[row][y] == num):
            Check_Valid = False
    rowsection = row // 3
    colsection = col // 3
    for x in range(3):
        for y in range(3):
            if Grid[rowsection * 3 + x][colsection * 3 + y] == num:
                Check_Valid = False
    return Check_Valid


def solve(bo):
    find = find_empty(bo)
    if not find:
        return True
    else:
        row, col = find

    i: int
    for i in range(1, 10):
        if valid(bo, i, (row, col)):
            bo[row][col] = i

            if solve(bo):
                return True

            bo[row][col] = 0

    return False


def valid(bo, num, pos):
    for i in range(len(bo[0])):
        if bo[pos[0]][i] == num and pos[1] != i:
            return False

    for i in range(len(bo)):
        if bo[i][pos[1]] == num and pos[0] != i:
            return False
    box_x = pos[1] // 3
    box_y = pos[0] // 3

    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if bo[i][j] == num and (i, j) != pos:
                return False

    return True


def print_board(bo):
    for i in range(len(bo)):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - - ")

        for j in range(len(bo[0])):
            if j % 3 == 0 and j != 0:
                print(" | ", end="")

            if j == 8:
                print(bo[i][j])
            else:
                print(str(bo[i][j]) + " ", end="")


def find_empty(bo):
    for i in range(len(bo)):
        for j in range(len(bo[0])):
            if bo[i][j] == 0:
                return i, j  # row, col

    return None

grid = MakeSudoku()

Printgrid(grid)

solver = input("\nPress Y to solve or N to leave : ")
if solver == 'Y' or solver == 'y':
    solve(grid)
    Printgrid(grid)

exit_app = input("Press Y to exit : ")
if exit_app == 'y' | exit_app == 'y':
    exit(1)
